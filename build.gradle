plugins {
    id("io.micronaut.library") version "4.2.1"
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

version = "0.1"
group = "fete.bird"

repositories {
    mavenCentral()
}
configurations {
    invoker
}

dependencies {
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.gcp:micronaut-gcp-function")
    compileOnly("com.google.cloud.functions:functions-framework-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut.gcp:micronaut-gcp-pubsub")
    testImplementation("com.google.cloud.functions:functions-framework-api")

    // Every function needs this dependency to get the Functions Framework API.
    compileOnly 'com.google.cloud.functions:functions-framework-api:1.1.0'

    // To run function locally using Functions Framework's local invoker
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.3.1'
}


java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}


micronaut {
    runtime("google_function")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("fete.bird.*")
    }
}

// Register a "runFunction" task to run the function locally
tasks.register("runFunction", JavaExec) {
  main = 'com.google.cloud.functions.invoker.runner.Invoker'
  classpath(configurations.invoker)
  inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
  args(
    '--target', project.findProperty('run.functionTarget') ?: 'fete.bird.Function',
    '--port', project.findProperty('run.port') ?: 8081
  )
  doFirst {
    args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
  }
}


